//Implement Kruskal's Algorithm for computing Minimum Spanning Tree of the input graph. Use heaps for your implementation.

#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

struct heap_node {
    int vertices ;
    int weight ;
    int adjacent ;

} ;
struct heap_node edges[10] ;
struct heap_node heap[10] ;

struct node{
    int parent ;
    int rank ;
} node[10];



int extractmax( int heap_size ) ;
void maxheapify(int index,int size) ;
void buildheap(int k) ;
void kruskals(int k ,int n ) ;
int Union(int u, int v) ;
int  sort_edzes(int k);

void main()
{
    struct node *p =NULL ,*temp=NULL ,*tmp=NULL,*temp2=NULL,*temp3=NULL ;

    int i ,k= 1 ,j,adjacent , n ,weight ,source,u ,flag ,v,mst_1 ,mst_2 ;

    //entering the no-> of vertices
    printf("ENTER THE NO OF VERTICES     \n INPUT >\n") ;
    scanf("%d",&n);

    for(i=1 ;i<n+1;i++)
    {
        printf("Enter the no of adjacent vertices to %dth  vertex\n INPUT >\n",i);
        scanf("%d",&j);
        printf("Enter the edges with its weight separated by space b/w them \n") ;
        while(j>0)
        {

            scanf("%d%d",&adjacent,&weight);

            //storing the edges to an array named edges
            edges[k].adjacent = i ;
            edges[k].vertices = adjacent ;
            edges[k].weight = weight ;
            k++ ;

            j--;
        }
    }

    //sorting the edges on the  basis of weight  in increasing
    sort_edzes(k-1);
    kruskals(k , n) ;

    return ;
}

int sort_edzes(int k)
{


    int i ,j =1 ;
    buildheap(k );


    for(i = 1 ;i <= k ;i++ )
    {
        extractmax(k-i+1) ;
    }
    printf(" \n");
   

    return 0;

}


//this function takes heap and pop the minimum element
//means deleting the the min element and maintaining  the heap property
int extractmax( int heap_size )
{
    //int t_key  ;
    struct heap_node tmp ;
    if(heap_size==0)
            return INT_MIN ;
    tmp = edges[1] ;

    //returning the top element in the heap and deleting it from the heap
    edges[1]=edges[heap_size] ;
    edges[heap_size] = tmp ;
    heap_size-- ;
    maxheapify(1 ,heap_size ) ;

    return tmp.vertices  ;
}

//this function takes the two child having heap properties and
// makes it heap with the given index having  given child
void maxheapify(int index,int size)
{
    int l_child ,r_child ;
    int s ;
    struct heap_node tmp  ;
    //initialising the right child and left child of the given parent
    l_child = index *2 ;
    r_child = index *2 +1 ;


        //since n/2 node does not have a single child so it already have the heap property
    if(index>(size/2))
        return ;


    s=l_child ;
    //assigning the s for which key value is mininmum of(right child ,left child)
    if(r_child <= size && edges[s].weight < edges[r_child].weight )
    {
           s= r_child ;
    }

    if (s<=size && edges[index]. weight < edges[s].weight)
    {
        tmp=edges[index] ;
        edges[index] =edges[s] ;
        edges[s] =tmp ;

        maxheapify( s ,size ) ;

    }
    return ;
}



//this fuction takes an array and make it heap
void buildheap(int k)
{
    int i =1 ;
    //since the heap property  is already true for the n/2 vetices having no child
    for(i=k/2 ; i  > 0 ;i--)
    {
        maxheapify(i,k) ;
    }
    return ;
}



void kruskals(int k , int n )
{
    int i ,flag= 1 ;
    //make_set
    for( i=1 ;i<=n ;i++  )
    {
        node[i].parent = i  ;
        node[i].rank = 0 ;
    }

    for(i=1 ;flag < n && i<=k ; i++ )
    {
        if(Union(edges[i].adjacent ,edges[i].vertices) == 1 )
        {

            edges[flag]=edges[i] ;
            flag++ ;
        }
    }
    //printing the edges if mst is possible ;
    if(flag == n  )
    {
        printf("            v              u            weight \n") ;
        for(i=1; i< n ; i++)
        {
            printf("            %d              %d              %d\n" , edges[i].vertices ,edges[i].adjacent ,edges[i].weight );
        }
    }else
        printf("NO MST POSSIBLE \n ") ;
}



int Union(int u, int v)
{
    int rep1 ,rep2 ;

    rep1 =find_set(u) ;
    rep2 =find_set(v) ;

    if(rep1==rep2)
        return 0;


    if(node[rep1].rank == node[rep2].rank)
    {

        node[rep1].rank++ ;
        node[rep2].parent =rep1 ;

    }else if(node[rep1].rank > node[rep2].rank)
    {
        node[rep2].parent = rep1  ;

    }
    else{
        node[rep1].parent = rep2 ;
    }



    return 1 ;
}


int find_set(int rep)
{
    if( rep  != node[rep].parent)
        node[rep].parent = find_set(node[rep].parent) ;

    return node[rep].parent ;
}







